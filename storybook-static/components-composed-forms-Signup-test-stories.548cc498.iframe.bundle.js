"use strict";(self.webpackChunkpluco_ui_2=self.webpackChunkpluco_ui_2||[]).push([[1100],{"./src/components/composed/forms/Signup/test.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ShouldDismissTheErrorUponFix:()=>ShouldDismissTheErrorUponFix,ShouldFillFormCorrectly:()=>ShouldFillFormCorrectly,ShouldNotSubmitAnEmptyForm:()=>ShouldNotSubmitAnEmptyForm,ShouldValidateConfirmPassword:()=>ShouldValidateConfirmPassword,ShouldValidateEmail:()=>ShouldValidateEmail,ShouldValidatePassword:()=>ShouldValidatePassword,ShouldWaitForBlurToValidate:()=>ShouldWaitForBlurToValidate,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_test__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/@storybook+test@8.3.6_storybook@8.3.6/node_modules/@storybook/test/dist/index.mjs"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/composed/forms/Signup/index.tsx"),_schema__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/composed/forms/Signup/schema.ts");const __WEBPACK_DEFAULT_EXPORT__={component:___WEBPACK_IMPORTED_MODULE_1__.l,title:"components/composed/forms/Signup/test",args:{onSubmit:(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fn)()}},ShouldFillFormCorrectly={args:{},play:async({args,canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement),usernameInput=canvas.getByRole("textbox",{name:"Username"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(usernameInput,"JoeDoe");const emailInput=canvas.getByRole("textbox",{name:"E-mail"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(emailInput,"joedoe@example.com");const passwordInput=canvas.getByRole("textbox",{name:"Password"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(passwordInput,"123123123");const confirmPasswordInput=canvas.getByRole("textbox",{name:"Confirm password"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(confirmPasswordInput,"123123123");const termsCheckbox=canvas.getByRole("checkbox");await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.click(termsCheckbox);const submitButton=canvas.getByRole("button",{name:"Sign up"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.click(submitButton),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(args.onSubmit).toHaveBeenCalled()}},ShouldNotSubmitAnEmptyForm={args:{},play:async({args,canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement),submitButton=canvas.getByRole("button",{name:"Sign up"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.click(submitButton),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(args.onSubmit).not.toHaveBeenCalled();const usernameError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.nameRequired),emailError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.emailRequired),passwordError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.passwordRequired),confirmPasswordError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.confirmPasswordRequired),termsError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.termsRequired);await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(usernameError).toBeVisible())),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(emailError).toBeVisible())),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(passwordError).toBeVisible())),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(confirmPasswordError).toBeVisible())),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(termsError).toBeVisible()))}},ShouldValidateEmail={args:{},play:async({canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement),emailInput=canvas.getByRole("textbox",{name:"E-mail"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(emailInput,"joedoe@"),await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab();const emailError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.emailInvalid);await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(emailError).toBeVisible()))}},ShouldValidatePassword={args:{},play:async({canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement),passwordInput=canvas.getByRole("textbox",{name:"Password"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(passwordInput,"123"),await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab();const passwordError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.passwordRequired);await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(passwordError).toBeVisible()))}},ShouldValidateConfirmPassword={args:{},play:async({canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement),passwordInput=canvas.getByRole("textbox",{name:"Password"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(passwordInput,"123123123");const confirmPasswordInput=canvas.getByRole("textbox",{name:"Confirm password"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.click(confirmPasswordInput),await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab();const passwordError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.confirmPasswordRequired);await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(passwordError).toBeVisible())),await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(confirmPasswordInput,"123"),await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab();const incorrectPasswordError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.confirmPasswordInvalid);await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(incorrectPasswordError).toBeVisible()))}},ShouldWaitForBlurToValidate={args:{},play:async({canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement);let usernameError=canvas.queryByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.nameRequired);await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(usernameError).toBeNull();const usernameInput=canvas.getByRole("textbox",{name:"Username"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.click(usernameInput),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(usernameError).toBeNull(),await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab(),usernameError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.nameRequired),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(usernameError).toBeVisible()))}},ShouldDismissTheErrorUponFix={args:{},play:async({canvasElement})=>{const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement),usernameInput=canvas.getByRole("textbox",{name:"Username"});await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.click(usernameInput),await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab();const nameError=canvas.getByText(_schema__WEBPACK_IMPORTED_MODULE_2__.D.nameRequired);await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(nameError).toBeVisible())),await _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(usernameInput,"JoeDoe"),await(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)((()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(nameError).not.toBeVisible()))}},__namedExportsOrder=["ShouldFillFormCorrectly","ShouldNotSubmitAnEmptyForm","ShouldValidateEmail","ShouldValidatePassword","ShouldValidateConfirmPassword","ShouldWaitForBlurToValidate","ShouldDismissTheErrorUponFix"];ShouldFillFormCorrectly.parameters={...ShouldFillFormCorrectly.parameters,docs:{...ShouldFillFormCorrectly.parameters?.docs,source:{originalSource:"{\n  args: {},\n  play: async ({\n    args,\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const usernameInput = canvas.getByRole('textbox', {\n      name: 'Username'\n    });\n    await userEvent.type(usernameInput, username);\n    const emailInput = canvas.getByRole('textbox', {\n      name: 'E-mail'\n    });\n    await userEvent.type(emailInput, email);\n    const passwordInput = canvas.getByRole('textbox', {\n      name: 'Password'\n    });\n    await userEvent.type(passwordInput, password);\n    const confirmPasswordInput = canvas.getByRole('textbox', {\n      name: 'Confirm password'\n    });\n    await userEvent.type(confirmPasswordInput, password);\n    const termsCheckbox = canvas.getByRole('checkbox');\n    await userEvent.click(termsCheckbox);\n    const submitButton = canvas.getByRole('button', {\n      name: 'Sign up'\n    });\n    await userEvent.click(submitButton);\n    await expect(args.onSubmit).toHaveBeenCalled();\n  }\n}",...ShouldFillFormCorrectly.parameters?.docs?.source}}},ShouldNotSubmitAnEmptyForm.parameters={...ShouldNotSubmitAnEmptyForm.parameters,docs:{...ShouldNotSubmitAnEmptyForm.parameters?.docs,source:{originalSource:"{\n  args: {},\n  play: async ({\n    args,\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const submitButton = canvas.getByRole('button', {\n      name: 'Sign up'\n    });\n    await userEvent.click(submitButton);\n    await expect(args.onSubmit).not.toHaveBeenCalled();\n    const usernameError = canvas.getByText(messages.nameRequired);\n    const emailError = canvas.getByText(messages.emailRequired);\n    const passwordError = canvas.getByText(messages.passwordRequired);\n    const confirmPasswordError = canvas.getByText(messages.confirmPasswordRequired);\n    const termsError = canvas.getByText(messages.termsRequired);\n    await waitFor(() => expect(usernameError).toBeVisible());\n    await waitFor(() => expect(emailError).toBeVisible());\n    await waitFor(() => expect(passwordError).toBeVisible());\n    await waitFor(() => expect(confirmPasswordError).toBeVisible());\n    await waitFor(() => expect(termsError).toBeVisible());\n  }\n}",...ShouldNotSubmitAnEmptyForm.parameters?.docs?.source}}},ShouldValidateEmail.parameters={...ShouldValidateEmail.parameters,docs:{...ShouldValidateEmail.parameters?.docs,source:{originalSource:"{\n  args: {},\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const emailInput = canvas.getByRole('textbox', {\n      name: 'E-mail'\n    });\n    await userEvent.type(emailInput, incompleteEmail);\n    await userEvent.tab();\n    const emailError = canvas.getByText(messages.emailInvalid);\n    await waitFor(() => expect(emailError).toBeVisible());\n  }\n}",...ShouldValidateEmail.parameters?.docs?.source}}},ShouldValidatePassword.parameters={...ShouldValidatePassword.parameters,docs:{...ShouldValidatePassword.parameters?.docs,source:{originalSource:"{\n  args: {},\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const passwordInput = canvas.getByRole('textbox', {\n      name: 'Password'\n    });\n    await userEvent.type(passwordInput, incompletePassword);\n    await userEvent.tab();\n    const passwordError = canvas.getByText(messages.passwordRequired);\n    await waitFor(() => expect(passwordError).toBeVisible());\n  }\n}",...ShouldValidatePassword.parameters?.docs?.source}}},ShouldValidateConfirmPassword.parameters={...ShouldValidateConfirmPassword.parameters,docs:{...ShouldValidateConfirmPassword.parameters?.docs,source:{originalSource:"{\n  args: {},\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const passwordInput = canvas.getByRole('textbox', {\n      name: 'Password'\n    });\n    await userEvent.type(passwordInput, password);\n    const confirmPasswordInput = canvas.getByRole('textbox', {\n      name: 'Confirm password'\n    });\n    await userEvent.click(confirmPasswordInput);\n    await userEvent.tab();\n    const passwordError = canvas.getByText(messages.confirmPasswordRequired);\n    await waitFor(() => expect(passwordError).toBeVisible());\n    await userEvent.type(confirmPasswordInput, incompletePassword);\n    await userEvent.tab();\n    const incorrectPasswordError = canvas.getByText(messages.confirmPasswordInvalid);\n    await waitFor(() => expect(incorrectPasswordError).toBeVisible());\n  }\n}",...ShouldValidateConfirmPassword.parameters?.docs?.source}}},ShouldWaitForBlurToValidate.parameters={...ShouldWaitForBlurToValidate.parameters,docs:{...ShouldWaitForBlurToValidate.parameters?.docs,source:{originalSource:"{\n  args: {},\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    let usernameError = canvas.queryByText(messages.nameRequired);\n    await expect(usernameError).toBeNull();\n    const usernameInput = canvas.getByRole('textbox', {\n      name: 'Username'\n    });\n    await userEvent.click(usernameInput);\n    await expect(usernameError).toBeNull();\n    await userEvent.tab();\n    usernameError = canvas.getByText(messages.nameRequired);\n    await waitFor(() => expect(usernameError).toBeVisible());\n  }\n}",...ShouldWaitForBlurToValidate.parameters?.docs?.source}}},ShouldDismissTheErrorUponFix.parameters={...ShouldDismissTheErrorUponFix.parameters,docs:{...ShouldDismissTheErrorUponFix.parameters?.docs,source:{originalSource:"{\n  args: {},\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const usernameInput = canvas.getByRole('textbox', {\n      name: 'Username'\n    });\n    await userEvent.click(usernameInput);\n    await userEvent.tab();\n    const nameError = canvas.getByText(messages.nameRequired);\n    await waitFor(() => expect(nameError).toBeVisible());\n    await userEvent.type(usernameInput, username);\n    await waitFor(() => expect(nameError).not.toBeVisible());\n  }\n}",...ShouldDismissTheErrorUponFix.parameters?.docs?.source}}}}}]);